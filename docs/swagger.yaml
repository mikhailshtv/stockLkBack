definitions:
  model.Error:
    properties:
      error:
        type: string
    type: object
  model.LoginRequest:
    properties:
      login:
        type: string
      password:
        type: string
    type: object
  model.Order:
    properties:
      createdDate:
        type: string
      id:
        type: integer
      lastModifiedDate:
        type: string
      number:
        type: integer
      products:
        items:
          $ref: '#/definitions/model.Product'
        type: array
      status:
        $ref: '#/definitions/model.OrderStatus'
      totalCost:
        type: integer
      userId:
        type: integer
    required:
    - products
    type: object
  model.OrderProduct:
    properties:
      productId:
        type: integer
      quantity:
        description: Количество покупаемых товаров
        type: integer
      sellPrice:
        description: Цена товара на момент создания заказа
        type: integer
    type: object
  model.OrderRequestBody:
    properties:
      products:
        items:
          $ref: '#/definitions/model.OrderProduct'
        type: array
    required:
    - products
    type: object
  model.OrderStatus:
    properties:
      displayName:
        type: string
      key:
        type: string
    type: object
  model.OrderStatusRequest:
    properties:
      status:
        $ref: '#/definitions/model.OrderStatus'
    type: object
  model.Product:
    properties:
      code:
        type: integer
      id:
        type: integer
      name:
        type: string
      purchasePrice:
        type: integer
      quantity:
        type: integer
      sellPrice:
        type: integer
    type: object
  model.ProductListResponse:
    description: Ответ со списком продуктов и метаданными пагинации.
    properties:
      data:
        items:
          $ref: '#/definitions/model.Product'
        type: array
      page:
        type: integer
      pageSize:
        type: integer
      total:
        type: integer
    type: object
  model.ProductRequestBody:
    properties:
      code:
        type: integer
      name:
        type: string
      purchasePrice:
        type: integer
      quantity:
        type: integer
      sellPrice:
        type: integer
    type: object
  model.Success:
    properties:
      message:
        type: string
      status:
        type: string
    type: object
  model.TokenSuccess:
    properties:
      message:
        type: string
      token:
        type: string
    type: object
  model.User:
    properties:
      email:
        type: string
      firstName:
        type: string
      id:
        type: integer
      lastName:
        type: string
      login:
        type: string
      role:
        $ref: '#/definitions/model.UserRole'
    required:
    - email
    - firstName
    - lastName
    - login
    type: object
  model.UserChangePasswordBody:
    properties:
      oldPassword:
        type: string
      password:
        type: string
      passwordConfirm:
        type: string
    required:
    - oldPassword
    - password
    - passwordConfirm
    type: object
  model.UserCreateBody:
    properties:
      email:
        type: string
      firstName:
        type: string
      lastName:
        type: string
      login:
        type: string
      password:
        type: string
      passwordConfirm:
        type: string
    type: object
  model.UserEditBody:
    properties:
      email:
        type: string
      firstName:
        type: string
      lastName:
        type: string
    type: object
  model.UserRole:
    enum:
    - client
    - employee
    type: string
    x-enum-varnames:
    - RoleClient
    - RoleEmployee
  model.UserRoleBody:
    properties:
      role:
        $ref: '#/definitions/model.UserRole'
    required:
    - role
    type: object
host: localhost:8080/
info:
  contact: {}
  description: API для сервиса управления товарами на скаладе продавца
  title: Сервис управления складом
  version: "1"
paths:
  /api/v1/login:
    post:
      consumes:
      - application/json
      parameters:
      - description: Данные для аутентификации пользователя
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/model.LoginRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.TokenSuccess'
        "400":
          description: Invalid request
          schema:
            $ref: '#/definitions/model.Error'
        "401":
          description: Anauthorized
          schema:
            $ref: '#/definitions/model.Error'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/model.Error'
      summary: Аутенификация пользователя
      tags:
      - Login
  /api/v1/orders:
    get:
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/model.Order'
            type: array
        "400":
          description: Invalid request
          schema:
            $ref: '#/definitions/model.Error'
        "401":
          description: Anauthorized
          schema:
            $ref: '#/definitions/model.Error'
        "500":
          description: Internal
          schema:
            type: string
      security:
      - BearerAuth.: []
      summary: Список заказов
      tags:
      - Orders
    post:
      consumes:
      - application/json
      parameters:
      - description: Объект заказа
        in: body
        name: order
        required: true
        schema:
          $ref: '#/definitions/model.OrderRequestBody'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/model.Order'
        "400":
          description: Invalid request
          schema:
            $ref: '#/definitions/model.Error'
        "401":
          description: Anauthorized
          schema:
            $ref: '#/definitions/model.Error'
        "500":
          description: Internal
          schema:
            $ref: '#/definitions/model.Error'
      security:
      - BearerAuth.: []
      summary: Создание заказа
      tags:
      - Orders
  /api/v1/orders/{id}:
    delete:
      parameters:
      - description: id заказа
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Объект успешно удален
          schema:
            $ref: '#/definitions/model.Success'
        "400":
          description: Invalid request
          schema:
            type: string
        "401":
          description: Anauthorized
          schema:
            $ref: '#/definitions/model.Error'
        "404":
          description: Not found
          schema:
            $ref: '#/definitions/model.Error'
        "500":
          description: Internal
          schema:
            type: string
      security:
      - BearerAuth.: []
      summary: Удаление заказа
      tags:
      - Orders
    get:
      parameters:
      - description: id заказа
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.Order'
        "400":
          description: Invalid request
          schema:
            type: string
        "401":
          description: Anauthorized
          schema:
            $ref: '#/definitions/model.Error'
        "404":
          description: Not found
          schema:
            $ref: '#/definitions/model.Error'
        "500":
          description: Internal
          schema:
            $ref: '#/definitions/model.Error'
      security:
      - BearerAuth.: []
      summary: Получение заказа по id
      tags:
      - Orders
    patch:
      parameters:
      - description: id заказа
        in: path
        name: id
        required: true
        type: string
      - description: Объект статуса заказа
        in: body
        name: order
        required: true
        schema:
          $ref: '#/definitions/model.OrderStatusRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Ok
          schema:
            $ref: '#/definitions/model.Order'
        "400":
          description: Invalid request
          schema:
            type: string
        "401":
          description: Anauthorized
          schema:
            $ref: '#/definitions/model.Error'
        "404":
          description: Not found
          schema:
            $ref: '#/definitions/model.Error'
        "500":
          description: Internal
          schema:
            type: string
      security:
      - BearerAuth.: []
      summary: Изменение статуса заказа
      tags:
      - Orders
  /api/v1/orders{id}:
    put:
      consumes:
      - application/json
      parameters:
      - description: id заказа
        in: path
        name: id
        required: true
        type: string
      - description: Объект заказа
        in: body
        name: order
        required: true
        schema:
          $ref: '#/definitions/model.OrderRequestBody'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.Order'
        "400":
          description: Invalid request
          schema:
            $ref: '#/definitions/model.Error'
        "401":
          description: Anauthorized
          schema:
            $ref: '#/definitions/model.Error'
        "404":
          description: Not found
          schema:
            $ref: '#/definitions/model.Error'
        "500":
          description: Internal
          schema:
            $ref: '#/definitions/model.Error'
      security:
      - BearerAuth.: []
      summary: Редактирование заказа
      tags:
      - Orders
  /api/v1/products:
    get:
      consumes:
      - application/json
      description: Получение списка продуктов с возможностью фильтрации, сортировки
        и пагинации
      parameters:
      - description: Фильтр по коду продукта
        in: query
        name: code
        type: integer
      - description: Фильтр по количеству
        in: query
        name: quantity
        type: integer
      - description: Фильтр по названию (поиск по подстроке)
        in: query
        name: name
        type: string
      - description: Фильтр по закупочной цене
        in: query
        name: purchase_price
        type: integer
      - description: Фильтр по цене продажи
        in: query
        name: sell_price
        type: integer
      - description: Поле для сортировки
        enum:
        - id
        - code
        - quantity
        - name
        - purchase_price
        - sell_price
        in: query
        name: sort_field
        type: string
      - default: ASC
        description: Направление сортировки
        enum:
        - ASC
        - DESC
        in: query
        name: sort_order
        type: string
      - default: 1
        description: Номер страницы
        in: query
        minimum: 1
        name: page
        type: integer
      - default: 25
        description: Размер страницы
        in: query
        maximum: 100
        minimum: 1
        name: page_size
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.ProductListResponse'
        "400":
          description: Некорректные параметры запроса
          schema:
            $ref: '#/definitions/model.Error'
        "401":
          description: Неавторизованный доступ
          schema:
            $ref: '#/definitions/model.Error'
        "500":
          description: Внутренняя ошибка сервера
          schema:
            $ref: '#/definitions/model.Error'
      security:
      - BearerAuth: []
      summary: Список продуктов
      tags:
      - Products
    post:
      consumes:
      - application/json
      parameters:
      - description: Объект продукта
        in: body
        name: product
        required: true
        schema:
          $ref: '#/definitions/model.ProductRequestBody'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/model.Product'
        "400":
          description: Invalid request
          schema:
            $ref: '#/definitions/model.Error'
        "401":
          description: Anauthorized
          schema:
            $ref: '#/definitions/model.Error'
        "500":
          description: Internal
          schema:
            $ref: '#/definitions/model.Error'
      security:
      - BearerAuth.: []
      summary: Создание продукта
      tags:
      - Products
  /api/v1/products/{id}:
    delete:
      parameters:
      - description: id продукта
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Объект успешно удален
          schema:
            $ref: '#/definitions/model.Success'
        "400":
          description: Invalid request
          schema:
            type: string
        "401":
          description: Anauthorized
          schema:
            $ref: '#/definitions/model.Error'
        "404":
          description: Not found
          schema:
            $ref: '#/definitions/model.Error'
        "500":
          description: Internal
          schema:
            $ref: '#/definitions/model.Error'
      security:
      - BearerAuth.: []
      summary: Удаление продукта
      tags:
      - Products
    get:
      parameters:
      - description: id продукта
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.Product'
        "400":
          description: Invalid request
          schema:
            type: string
        "401":
          description: Anauthorized
          schema:
            $ref: '#/definitions/model.Error'
        "404":
          description: Not found
          schema:
            $ref: '#/definitions/model.Error'
        "500":
          description: Internal
          schema:
            $ref: '#/definitions/model.Error'
      security:
      - BearerAuth.: []
      summary: Получение продукта по id
      tags:
      - Products
    put:
      consumes:
      - application/json
      parameters:
      - description: Объект продукта
        in: body
        name: product
        required: true
        schema:
          $ref: '#/definitions/model.ProductRequestBody'
      - description: id продукта
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.Product'
        "400":
          description: Invalid request
          schema:
            $ref: '#/definitions/model.Error'
        "401":
          description: Anauthorized
          schema:
            $ref: '#/definitions/model.Error'
        "404":
          description: Not found
          schema:
            $ref: '#/definitions/model.Error'
        "500":
          description: Internal
          schema:
            $ref: '#/definitions/model.Error'
      security:
      - BearerAuth.: []
      summary: Редактирование продукта
      tags:
      - Products
  /api/v1/users:
    get:
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/model.User'
            type: array
        "401":
          description: Anauthorized
          schema:
            $ref: '#/definitions/model.Error'
        "500":
          description: Internal
          schema:
            $ref: '#/definitions/model.Error'
      security:
      - BearerAuth.: []
      summary: Список пользователей
      tags:
      - Users
    post:
      consumes:
      - application/json
      parameters:
      - description: Объект пользователя
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/model.UserCreateBody'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/model.User'
        "400":
          description: Invalid request
          schema:
            $ref: '#/definitions/model.Error'
        "500":
          description: Internal
          schema:
            $ref: '#/definitions/model.Error'
      summary: Создание/регистрация пользователя
      tags:
      - Users
  /api/v1/users/{id}:
    delete:
      parameters:
      - description: id пользователя
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Объект успешно удален
          schema:
            $ref: '#/definitions/model.Success'
        "400":
          description: Invalid request
          schema:
            $ref: '#/definitions/model.Error'
        "401":
          description: Anauthorized
          schema:
            $ref: '#/definitions/model.Error'
        "404":
          description: Not found
          schema:
            $ref: '#/definitions/model.Error'
        "500":
          description: Internal
          schema:
            $ref: '#/definitions/model.Error'
      security:
      - BearerAuth.: []
      summary: Удаление пользователя
      tags:
      - Users
    get:
      parameters:
      - description: id пользователя
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.User'
        "400":
          description: Invalid request
          schema:
            $ref: '#/definitions/model.Error'
        "401":
          description: Anauthorized
          schema:
            $ref: '#/definitions/model.Error'
        "404":
          description: Not found
          schema:
            $ref: '#/definitions/model.Error'
        "500":
          description: Internal
          schema:
            $ref: '#/definitions/model.Error'
      security:
      - BearerAuth.: []
      summary: Получение пользователя по id
      tags:
      - Users
    put:
      consumes:
      - application/json
      parameters:
      - description: Объект пользователя
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/model.UserEditBody'
      - description: id пользователя
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.User'
        "400":
          description: Invalid request
          schema:
            $ref: '#/definitions/model.Error'
        "401":
          description: Anauthorized
          schema:
            $ref: '#/definitions/model.Error'
        "404":
          description: Not found
          schema:
            $ref: '#/definitions/model.Error'
        "422":
          description: Unprocessable Entity
          schema:
            $ref: '#/definitions/model.Error'
        "500":
          description: Internal
          schema:
            $ref: '#/definitions/model.Error'
      security:
      - BearerAuth.: []
      summary: Редактирование пользователя
      tags:
      - Users
  /api/v1/users/{id}/password:
    patch:
      consumes:
      - application/json
      parameters:
      - description: Объект с паролем пользователя
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/model.UserChangePasswordBody'
      - description: id пользователя
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.Success'
        "400":
          description: Invalid request
          schema:
            $ref: '#/definitions/model.Error'
        "401":
          description: Anauthorized
          schema:
            $ref: '#/definitions/model.Error'
        "404":
          description: Not found
          schema:
            $ref: '#/definitions/model.Error'
        "500":
          description: Internal
          schema:
            $ref: '#/definitions/model.Error'
      security:
      - BearerAuth.: []
      summary: Изменение пароля пользователя
      tags:
      - Users
  /api/v1/users/{id}/role:
    patch:
      consumes:
      - application/json
      parameters:
      - description: Объект с ролью пользователя
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/model.UserRoleBody'
      - description: id пользователя
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.User'
        "400":
          description: Invalid request
          schema:
            $ref: '#/definitions/model.Error'
        "401":
          description: Anauthorized
          schema:
            $ref: '#/definitions/model.Error'
        "404":
          description: Not found
          schema:
            $ref: '#/definitions/model.Error'
        "500":
          description: Internal
          schema:
            $ref: '#/definitions/model.Error'
      security:
      - BearerAuth.: []
      summary: Изменение роли пользователя
      tags:
      - Users
securityDefinitions:
  BearerAuth:
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
